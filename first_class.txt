Indentation refers to the spaces at the beginning of a code line.
Python has no command for declaring a variable.

# Variables are containers for storing data values.
# Variable names are case-sensitive.
# A variable name must start with a letter  and it can't start with number


Multi Words Variable Names
Camel Case
Each word, except the first, starts with a capital letter:
myVariableName = "John"

Pascal Case
Each word starts with a capital letter:
MyVariableName = "John"

Snake Case
Each word is separated by an underscore character:
my_variable_name = "John"


# MULTIPLE ASSIGNMENT
Note: Make sure the number of variables matches the number of values, or else you will get an error.


DATA TYPES IN PythonText Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview
None Type:	NoneType





Python divides the operators in the following groups:
Arithmetic operators
Assignment operators
Comparison operators
Logical operators


Arithmetic Operators -> it is use with numeric value to perform common mathematical operation.
+	Addition	x + y	
-	Subtraction	x - y	
*	Multiplication	x * y	
/	Division	x / y	
%	Modulus	x % y	
**	Exponentiation	x ** y	
//	Floor division	x // y


Python Assignment Operators
Assignment operators are used to assign values to variables:
Operator	        Example	
=	x = 5	        x = 5	
+=	x += 3	        x = x + 3	
-=	x -= 3	        x = x - 3	
*=	x *= 3	        x = x * 3	
/=	x /= 3	        x = x / 3

Python Comparison Operators
Comparison operators are used to compare two values:
Operator	Name	Example	
==	Equal	x == y	
!=	Not equal	x != y	
>	Greater than	x > y	
<	Less than	x < y	
>=	Greater than or equal to	x >= y	
<=	Less than or equal to	x <= y


Python Logical Operators
Logical operators are used to combine conditional statements:
Operator	Description	                                                  Example x = 5
and 	    Returns True if both statements are true	                  x < 5 and  x < 10	
or	        Returns True if one of the statements is true	               x < 5 or x < 4	
not	        Reverse the result, returns False if the result is true	not     (x < 5 and x < 10) --print(not(x > 3 and x < 10))




Python Collections (Arrays)
There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
Dictionary is a collection which is ordered** and changeable. No duplicate members.


SEQUENCE TYPE
Lists are used to store multiple items in a single variable.
Lists are created using square brackets:[]

List Methods
Python has a set of built-in methods that you can use on lists.

Method                 Description
append()	      Adds an element at the end of the list
clear()	          Removes all the elements from the list
copy()            Returns a copy of the list
count()	          Returns the number of elements with the specified value
extend()	      Add the elements of a list (or any iterable), to the end of the current list
index()	          Returns the index of the first element with the specified value
insert()	      Adds an element at the specified position
pop()	          Removes the element at the specified position
remove()	      Removes the item with the specified value
reverse()	      Reverses the order of the list
sort()	          Sorts the list


Lists are one of 4 built-in data types in Python used to store collections of data,
 the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.
fruits_list = ["apple", "banana", "cherry "orange", "kiwi", "melon", "mango""]
print(fruits_list)
print(fruits_list[1]) index

Negative Indexing
Negative indexing means start from the end
print(fruits_list[-1])

print(fruits_list[2:5]) range indexing

To add an item to the end of the list, use the append() method:
fruits_list.append("orange")

To insert a list item at a specified index, use the insert() method.
fruits_list.insert(1, "pineapple")


The remove() method removes the specified item.
fruits_list.remove("banana")

The pop() method removes the specified index.
fruits_list.pop(1)
If you do not specify the index, the pop() method removes the last item.

The del keyword also removes the specified index: (Drop)
del fruits_list[0]
The del keyword can also delete the list completely.
del fruits_list

The clear() method empties the list. but list  structure still remains and it can acccept new data (Truncate in mysql)

The list still remains, but it has no content. (Drop and Truncate)
fruits_list.clear()


Loop Through a List
You can loop through the list items by using a for loop:
for x in fruits_list:
  print(x)

Looping Using List Comprehension
List Comprehension offers the shortest syntax for looping through lists:
[print(x) for x in fruits_list]

newlist = [x for x in fruits_list if "a" in x]
print(newlist)

Condition
The condition is like a filter that only accepts the items that valuate to True.
Only accept items that are not "apple":
newlist = [x for x in fruits_list if x != "apple"]
print(newlist)

Set all values in the new list to 'hello':
newlist = ['hello' for x in fruits]

"SORT"
Sort the list alphabetically: Ascending
fruits_list.sort()
print(fruits_list)

Sort the list numerically:
number_list = [100, 50, 65, 82, 23]
number_list.sort()
print(number_list)

Sort Descending
To sort descending, use the keyword argument reverse = True:
number_list.sort(reverse = True)

COPY
Make a copy of a list with the copy() method:
newlist = fruits_list.copy()     or   newlist = list(fruits_list)
print(newlist)  


Join Two List
One of the easiest ways are by using the + operator.
list1 = ["a", "b", "c"]
list2 = [1, 2, 3]
list3 = list1 + list2
print(list3)






Tuple
Tuples are used to store multiple items in a single variable.
A tuple is a collection which is ordered and unchangeable. 
unchangeable: means that we cannot change, add or remove items after the tuple has been created.
Tuples are written with round brackets.() it allow duplicate values:

Example 
first_tuple = ("apple", "banana", "cherry")
print(first_tuple)

Note: When creating a tuple with only one item, remember to include a comma after the item, otherwise it will not be identified as a tuple.
first_tuple = ("apple",)
print(type(first_tuple))

Updating & deleting item/index in  tuple

thistuple = ("apple", "banana", "cherry")
y = list(thistuple)
y.append("orange")  or y.remove("orange")
thistuple = tuple(y)
print(thistuple)


Multiply Tuples
If you want to multiply the content of a tuple a given number of times, you can use the * operator:

Example
Multiply the fruits tuple by 2:

fruits = ("apple", "banana", "cherry")
mytuple = fruits * 2
print(mytuple)

Count method
thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)
print(thistuple.count(5))

index method
thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)
x = thistuple.index(8)
print(x)




Set
Sets are used to store multiple items in a single variable.
* Note: Set items are unchangeable, but you can remove items and add new items.
Sets are written with curly brackets{}
thisset = {"apple", "banana", "cherry"}
print(thisset)

Duplicates Not Allowed
Duplicate values will be ignored:
thisset = {"apple", "banana", "cherry", "apple"}
print(thisset)


Once a set is created, you cannot change its items, but you can add new items.
thisset = {"apple", "banana", "cherry"}
thisset.add("orange")
print(thisset)

Remove Item
To remove an item in a set, use the remove(), or the discard() method.
thisset.remove("banana")
thisset.discard("banana")
Note: If the item to remove does not exist, discard() will NOT raise an error.

Join Two Sets
The union() method returns a new set with all items from both sets:
set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}
set3 = set1.union(set2)
print(set3)


Dictionary
Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
Dictionaries are written with curly brackets, and have keys and values:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)
ACCES ITEMS
x = thisdict.get("model")
x = thisdict.keys()    Get a full list of the keys in dictionary
x = thisdict.values()   Get a full list of the values in dictionary
x = thisdict.items()   Get a full l
print(type(thisdict))
print(len(thisdict))

Dictionary items are presented in key:value pairs, and can be referred to by using the key name.
print(thisdict["brand"],thisdict["model"])


Duplicates Not Allowed
e.g having same key name in one dictionary, it will ignore  duplicate






Python Conditions and If statements
Python supports the usual logical conditions from mathematics:
Equals: a == b
Not Equals: a != b
Less than: a < b
Less than or equal to: a <= b
Greater than: a > b
Greater than or equal to: a >= b


a = 200
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")

One line if statement:
if a > b: print("a is greater than b")


AND / OR
a = 200
b = 33
c = 500
if a > b and c > a:
  print("Both conditions are True")